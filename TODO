Too much to list, but here's a list anyway:

* Sound
    More and better sound effects
    Music

* Engineering screen
    make comms power do something
    Some sliders set only a maximum, while others control power usage
	this is confusing.  Figure something out to make it less confusing.
	(partially done -- fuzzing the power output kind of makes the
	situation more obvious.)

* Communications screen
    Starbase comm stuff
    Enemy ship comm monitoring
    Friendly ship stuff
    bridge-to-bridge comm
    take damage into account
    Allow submitting natural language queries to 'the computer' and
      get responses verbally (text to speech) and in actions.  Ideally,
      these could be activated via speech recognition as well, but this
      may not be feasible.

      For example:

	Computer, set a course for starbase one.
	(computer verbalizes: "setting course for starbase one, heading blah, mark blah."
	and ship rotates to face sb-01)

      More examples of commands which I'd like to work:

	* Navigate to <destination>
	* Set a course for <destination>
	* Lower/raise/set shields (to <value>)
	* engage docking system
	* disengage docking system
	* how far to <destination>
	* range to <destination>
	* Do we have enough fuel to reach <destination>
	* calculate a course to <destination> (replies with heading and mark)
	* damage/status report (replies with list of damaged systems in order from
	  most damaged to least, eg: "Warp drive: 50%, Impulse drive: 70%, all
	  other systems are within normal range."
	* engage warp drive
	* (set) warp factor <value>
	* (set) impulse to <value> percent

* Navigation screen
  Allow easier navigation by coordinates so lua scripts can say: goto x,y,z
  and it's possible for nav to reasonably follow such orders.

* Weapons screen

* Science station
  Allow some sort of arbitrary info about objects or just in general
  to be detected and fed to the game via lua.
  * Allow scanning of planet surface

* Add some kind of transporter control which interacts with science
  scanning of planet surface/scanning of ships to allow beaming up/down
  of "passengers" or cargo.

* Setup screen
  Try to make it more intuitive for people who are seeing it for
  the first time ever.

* write some kind of guide to hacking, to make it easier for others to
  contribute to this codebase.

* computer-controlled-ships
  loads of AI improvements and basic functionality
  remains to be done.
  Avoid going inside/through planets.  This is mostly done
  though I still see a ship crash into a planet every once it a blue moon
  * it should be the case that each ship model is associated with a particular
    faction.
  * It should be the case that each ship model is noticably different in capabilities
    and science should have some insight into this.  Some ships should be noticeably
    more difficult or easier to destroy.
  * Allow ship to ship docking?

* Add proximity mines
* Add missiles of some kind
* Add black holes with some kind of physics impact
* Add Lua controllable macguffins of some kind

* starbase behavior
  Allow refueler ships to be requested for remote refueling.

* anomalies, macguffins etc. need to be implemented

* 3D out the window view
  Fade distant objects to black

* comms screen:
  need to be able to communicate with starbases -- request
  various things of the starbase.   Partially done, but still needs work.
  intercept chatter between enemy ships
  ??? need to figure out what the hell the comms screen is good for.

* Damage control screen:
  Make the various components of the systems less generic
  Make damage control a bit less useless

* Need sound for wormhole travel
* I think the universe needs to be bigger, you can see too far out
  the main screen relative to the instruments, size of the universe.
  Or else maybe some kind of fog.
* joystick support for weapons and nav, and maybe others.
* allow mining of asteroids, asteroid mining bots or something
* trading of stuff mined from asteroids at stations.
* Need to be able to checkpoint-restart universe state on server side
  (how do lua scripts fit into checkpoint restart?)
* more lua event callbacks, some mission scripts done with lua
  basically, flesh out the lua scripting system.
* Moar mission scripts!
* Remove use of "heading" field in snis_entity
* Make space monster do something interesting
* Make space monster work again
* make tractor beam work again/better.
* Currently, number keypad doesn't work for numbers.  It should work.

LOBBY
* Allow multi-homed snis_server to work.  Currently only one ip addr is known
  to the lobby, so if machines are coming from multiple interfaces, it doesn't
  really work.
* Allow lobbyless operation, user configurable port for snis_server, and client
  able to connect to user configureable ip and port.

NICE TO HAVE:

* Make the universe more realistic in a variety of ways (but not too realistic,
  i.e. if the ship is the nominal size of The Enterprise, then Saturn would be
  bigger than the current known in-game universe -- obviously that is too much
  realism.   Also, have planets orbiting stars, stations orbiting planets, etc,
  instead of what we have now, which is just stuff randomly sprinkled around.

* Make art assets live on server and be transmitted to clients on demand.

* Flesh out warp core ejection mechanic

* Make computer better at understanding waypoints.
  It now understands "set a course for waypoint X", but doesn't understand
  "set a course for the nearest waypoint", or "set a course for the selected
  waypoint", or "how far to waypoint blah"


* Make the central star shader better. Right now it is simply a
  dumb billboard, which looks ok, but there it looks unnatural as
  the star comes around the limb of a planet, etc. there's no sense
  of brightness. See for example: https://www.seedofandromeda.com/blogs/51-procedural-star-rendering
  The sunspots, corona, etc are overkill, but the lens flare, the way
  it comes around the edge of a planet, etc, all look really good.

* Allow for self-shadowing in the renderer (i.e. ships to cast shadows
  on themselves.) This may be relevant:
  http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/

* Add a Real Time Strategy game into SNIS.

  This will give COMMS station some things to do. I envision it to work
  something like this.

  There will be two MAIN PLANETS, each belonging to two main OPPONENTS.

  To win the game, conquer opponents MAIN PLANET. MAIN PLANET has some
  hit points that cannot be replenished. Once depleted to zero, the game
  is over. So it is important to defend main planet.

  There will be some subsidiary planets and starbases between the two
  MAIN PLANETS. Starbases can build UNITS. Each starbase may be controlled
  by either opponent, or be neutral.  Players can request starbases that
  they control to build units, for some cost. The more starbases a player
  controls, the faster they accumulate money for building units.  To capture
  a starbase, a player must occupy it with four units. Once it is occuppied,
  it may be taken over by another player if that player occupies it with 4 units.
  There will be several types of units, tentatively:

  * Troop ship: These are the only units which may occupy a starbase.
    They are cheap, but weakly armored and slow, and can inflict minimal
    damage.
  * Gunship: heavily armored, slow, can inflict medium damage
  * Scout: light, fast, light damage.
  * Turret: Fixed position, heavy fire, good for defense.
  * Resupply ship: slow, light armor, can repair and replenish other ships
  * Others???

  Each unit can be given ORDERS (not all units can take all orders):

  (tentative):
  * Attack MAIN PLANET
  * Occupy nearest starbase (troopship only)
  * Patrol area
  * Escort
  * Attack nearest enemy
  * Move to destination

  So COMMS station will:

  1. Direct STARBASES to manufacture UNITS.
  2. Give ORDERS to UNITS.

  The rest of the crew of the ship can drive around and help
  the UNITS accomplish their goal by wreaking destruction upon
  enemy units.

  It may be that COMMS POWER restricts range of communication?

* Improve ship movement.  Currently ship movement can be a bit crappy.
  For example, sometimes ships will come to a complete stop on their
  way somewhere for a period of time for no real reason before continuing
  on their way.  Also, the way the orientation of ships is figured is based
  on which way they are moving, where it should probably be the reverse, which
  way they move should be determined by orientation, and to change direction,
  they should first change their orientation.  Also, they could fly a little
  more "cinematically", that is, like fighter planes, (maybe similar to Elite)
  with more pitching and rolling and less yawing. Particularly,
  ai_ship_travel_towards() and ai_ship_add_movement_variety() in snis_server.c
  could be improved (or replaced) with something better. Those alone do not
  touch the orientation problem though, so there's more to it than that.

